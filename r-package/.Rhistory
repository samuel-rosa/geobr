temp_sf <- remove_state_repetition(temp_sf)
# simplify
temp_sf_simplified <- simplify_temp_sf(temp_sf)
# convert to MULTIPOLYGON
temp_sf <- to_multipolygon(temp_sf)
temp_sf_simplified <- to_multipolygon(temp_sf_simplified)
# Save cleaned sf in the cleaned directory
dir.dest.file <- paste0(dir.dest,"/")
if (year < 2015) {
file.name <- paste0(unique(substr(temp_sf$code_state,1,2)),"UF",".gpkg")
# original
i <- paste0(dir.dest.file,file.name)
sf::st_write(temp_sf, i, overwrite=TRUE)
# simplified
i <- gsub(".gpkg", "_simplified.gpkg", i)
sf::st_write(temp_sf_simplified, i, overwrite=TRUE)
}
if (year >= 2015) {
for( c in temp_sf$code_state){ # c <-33
temp2 <- subset(temp_sf, code_state ==c)
file.name <- paste0(unique(substr(temp2$code_state,1,2)),"UF",".gpkg")
# original
i <- paste0(dir.dest.file,file.name)
sf::st_write(temp2, i, overwrite=TRUE)
# simplified
i <- gsub(".gpkg", "_simplified.gpkg", i)
sf::st_write(temp2, i, overwrite=TRUE)
}
}
}
}
# apply function in parallel
future::plan(multisession)
future_map(sub_dirs, clean_states)
source("./prep_data/prep_functions.R")
source('./prep_data/download_malhas_municipais_function.R')
setwd('L:/# DIRUR #/ASMEQ/geobr/data-raw')
###### Cleaning MICRO files --------------------------------
setwd('L:/# DIRUR #/ASMEQ/geobr/data-raw/malhas_municipais')
micro_dir <- paste0(getwd(),"/shapes_in_sf_all_years_original/micro_regiao")
sub_dirs <- list.dirs(path=micro_dir, recursive = F)
sub_dirs <- sub_dirs[sub_dirs %like% paste0(2000:2020,collapse = "|")]
# create a function that will clean the sf files according to particularities of the data in each year0
clean_micro <- function( e ){ #  e <- sub_dirs[ sub_dirs %like% 2000]
options(encoding = "UTF-8")
# get year of the folder
last4 <- function(x){substr(x, nchar(x)-3, nchar(x))}   # function to get the last 4 digits of a string
year <- last4(e)
year
# create directory to save original shape files in sf format
dir.create(file.path("shapes_in_sf_all_years_cleaned2"), showWarnings = FALSE)
# create a subdirectory of states, municipalities, micro and meso regions
dir.create(file.path("shapes_in_sf_all_years_cleaned2/micro_regiao/"), showWarnings = FALSE)
# create a subdirectory of years
dir.create(file.path(paste0("shapes_in_sf_all_years_cleaned2/micro_regiao/",year)), showWarnings = FALSE)
gc(reset = T)
dir.dest <- file.path(paste0("./shapes_in_sf_all_years_cleaned2/micro_regiao/",year))
# list all sf files in that year/folder
sf_files <- list.files(e, full.names = T, recursive = T, pattern = ".gpkg$")
#sf_files <- sf_files[sf_files %like% "Microrregioes"]
# for each file
for (i in sf_files){ #  i <- sf_files[8]
# read sf file
temp_sf <- st_read(i)
names(temp_sf) <- names(temp_sf) %>% tolower()
if (year %like% "2000|2001"){
# dplyr::rename and subset columns
temp_sf <- dplyr::select(temp_sf, c('code_micro'= geocodigo, 'name_micro'=nome, 'geom'))
}
if (year %like% "2010"){
# dplyr::rename and subset columns
temp_sf <- dplyr::select(temp_sf, c('code_micro'=cd_geocodu, 'name_micro'=nm_micro, 'geom'))
}
if (year %like% "2013|2014|2015|2016|2017|2018"){
# dplyr::rename and subset columns
temp_sf <- dplyr::select(temp_sf, c('code_micro'=cd_geocmi, 'name_micro'=nm_micro, 'geom'))
}
if (year %like% "2019|2020"){
# dplyr::rename and subset columns
temp_sf <- dplyr::select(temp_sf, c('code_micro'=cd_micro, 'name_micro'=nm_micro, 'abbrev_state'=sigla_uf, 'geom'))
}
# Use UTF-8 encoding
temp_sf <- use_encoding_utf8(temp_sf)
# add name_state
temp_sf$code_state <- substring(temp_sf$code_micro, 1,2)
temp_sf <- add_state_info(temp_sf,column = 'code_micro')
# reorder columns
temp_sf <- dplyr::select(temp_sf, 'code_state', 'abbrev_state', 'name_state', 'code_micro', 'name_micro', 'geom')
# Capitalize the first letter
temp_sf$name_micro <- stringr::str_to_title(temp_sf$name_micro)
# Harmonize spatial projection CRS, using SIRGAS 2000 epsg (SRID): 4674
temp_sf <- harmonize_projection(temp_sf)
# strange error in Bahia 2000
# remove geometries with area == 0
temp_sf <- temp_sf[ as.numeric(st_area(temp_sf)) != 0, ]
# Make an invalid geometry valid # st_is_valid( sf)
temp_sf <- sf::st_make_valid(temp_sf)
# keep code as.numeric()
temp_sf$code_micro <- as.numeric(temp_sf$code_micro)
temp_sf$code_state <- as.numeric(temp_sf$code_state)
# simplify
temp_sf_simplified <- simplify_temp_sf(temp_sf)
# convert to MULTIPOLYGON
temp_sf <- to_multipolygon(temp_sf)
temp_sf_simplified <- to_multipolygon(temp_sf_simplified)
# Save cleaned sf in the cleaned directory
dir.dest.file <- paste0(dir.dest,"/")
# save each state separately
for( c in unique(temp_sf$code_state)){ # c <- 11
temp2 <- subset(temp_sf, code_state ==c)
temp2_simplified <- subset(temp_sf_simplified, code_state ==c)
file.name <- paste0(unique(substr(temp2$code_state,1,2)),"UF",".gpkg")
# original
i <- paste0(dir.dest.file,file.name)
sf::st_write(temp2, i, overwrite=TRUE)
# simplified
i <- gsub(".gpkg", "_simplified.gpkg", i)
sf::st_write(temp2_simplified, i, overwrite=TRUE)
}
}
}
e <- sub_dirs[ sub_dirs %like% 2000]
options(encoding = "UTF-8")
# get year of the folder
last4 <- function(x){substr(x, nchar(x)-3, nchar(x))}   # function to get the last 4 digits of a string
year <- last4(e)
year
# create directory to save original shape files in sf format
dir.create(file.path("shapes_in_sf_all_years_cleaned2"), showWarnings = FALSE)
# create a subdirectory of states, municipalities, micro and meso regions
dir.create(file.path("shapes_in_sf_all_years_cleaned2/micro_regiao/"), showWarnings = FALSE)
# create a subdirectory of years
dir.create(file.path(paste0("shapes_in_sf_all_years_cleaned2/micro_regiao/",year)), showWarnings = FALSE)
gc(reset = T)
dir.dest <- file.path(paste0("./shapes_in_sf_all_years_cleaned2/micro_regiao/",year))
# list all sf files in that year/folder
sf_files <- list.files(e, full.names = T, recursive = T, pattern = ".gpkg$")
i <- sf_files[8]
i
# read sf file
temp_sf <- st_read(i)
names(temp_sf) <- names(temp_sf) %>% tolower()
head(temp_sf)
if (year %like% "2000|2001"){
# dplyr::rename and subset columns
temp_sf <- dplyr::select(temp_sf, c('code_micro'= geocodigo, 'name_micro'=nome, 'geom'))
}
if (year %like% "2010"){
# dplyr::rename and subset columns
temp_sf <- dplyr::select(temp_sf, c('code_micro'=cd_geocodu, 'name_micro'=nm_micro, 'geom'))
}
if (year %like% "2013|2014|2015|2016|2017|2018"){
# dplyr::rename and subset columns
temp_sf <- dplyr::select(temp_sf, c('code_micro'=cd_geocmi, 'name_micro'=nm_micro, 'geom'))
}
if (year %like% "2019|2020"){
# dplyr::rename and subset columns
temp_sf <- dplyr::select(temp_sf, c('code_micro'=cd_micro, 'name_micro'=nm_micro, 'abbrev_state'=sigla_uf, 'geom'))
}
# Use UTF-8 encoding
temp_sf <- use_encoding_utf8(temp_sf)
# add name_state
temp_sf$code_state <- substring(temp_sf$code_micro, 1,2)
temp_sf <- add_state_info(temp_sf,column = 'code_micro')
head(temp_sf)
# reorder columns
temp_sf <- dplyr::select(temp_sf, 'code_state', 'abbrev_state', 'name_state', 'code_micro', 'name_micro', 'geom')
# Capitalize the first letter
temp_sf$name_micro <- stringr::str_to_title(temp_sf$name_micro)
# Harmonize spatial projection CRS, using SIRGAS 2000 epsg (SRID): 4674
temp_sf <- harmonize_projection(temp_sf)
# strange error in Bahia 2000
# remove geometries with area == 0
temp_sf2 <- temp_sf[ as.numeric(st_area(temp_sf)) != 0, ]
st_area(temp_sf)
head(temp_sf)
temp_sf[3,]
temp_sf[3,] %>% plot()
subset(temp_sf, code_state != 21)
subset(temp_sf, code_state != 21)  %>% plot()
# strange error in Maranhao 2000
micro_21 <- geobr::read_micro_region(code_micro = 21, year=2000)
plot(micro_21)
head(micro_21)
# strange error in Maranhao 2000
micro_21 <- geobr::read_micro_region(code_micro = 21, year=2001)
micro_21
library(mapview)
mapview(micro_21)
temp_sf
temp_sf[3,]
temp_sf[3, c('code_state', 'abbrev_state')]
temp_sf[3, c('code_state', 'abbrev_state')] <- c(1111, 'bbbb')
temp_sf
mapview(micro_21) + temp_sf[3,]
mapview(micro_21) + temp_sf[c(3,7),]
year=2001 & temp_sf$code_state[1]==21
( year==2001 & temp_sf$code_state[1]==21)
# read sf file
temp_sf <- st_read(i)
year
year=2000
geobr::read_micro_region(code_micro = 21, year=2001)
geobr::read_micro_region(code_micro = 21, year=2000)
temp_sf
(year==2000 & temp_sf$code_state[1]==21)
year==2000
temp_sf$code_state[1]
temp_sf
# read sf file
temp_sf <- st_read(i)
names(temp_sf) <- names(temp_sf) %>% tolower()
if (year %like% "2000|2001"){
# dplyr::rename and subset columns
temp_sf <- dplyr::select(temp_sf, c('code_micro'= geocodigo, 'name_micro'=nome, 'geom'))
}
if (year %like% "2010"){
# dplyr::rename and subset columns
temp_sf <- dplyr::select(temp_sf, c('code_micro'=cd_geocodu, 'name_micro'=nm_micro, 'geom'))
}
if (year %like% "2013|2014|2015|2016|2017|2018"){
# dplyr::rename and subset columns
temp_sf <- dplyr::select(temp_sf, c('code_micro'=cd_geocmi, 'name_micro'=nm_micro, 'geom'))
}
if (year %like% "2019|2020"){
# dplyr::rename and subset columns
temp_sf <- dplyr::select(temp_sf, c('code_micro'=cd_micro, 'name_micro'=nm_micro, 'abbrev_state'=sigla_uf, 'geom'))
}
# Use UTF-8 encoding
temp_sf <- use_encoding_utf8(temp_sf)
# add name_state
temp_sf$code_state <- substring(temp_sf$code_micro, 1,2)
temp_sf <- add_state_info(temp_sf,column = 'code_micro')
# reorder columns
temp_sf <- dplyr::select(temp_sf, 'code_state', 'abbrev_state', 'name_state', 'code_micro', 'name_micro', 'geom')
# Capitalize the first letter
temp_sf$name_micro <- stringr::str_to_title(temp_sf$name_micro)
# Harmonize spatial projection CRS, using SIRGAS 2000 epsg (SRID): 4674
temp_sf <- harmonize_projection(temp_sf)
# strange error in Bahia 2000
# remove geometries with area == 0
temp_sf <- temp_sf[ as.numeric(st_area(temp_sf)) != 0, ]
(year==2000 & temp_sf$code_state[1]==21)
if (year==2000 & temp_sf$code_state[1]==21) {
temp_sf[3, c('code_state', 'abbrev_state', 'name_state', 'code_micro', 'names_micro')] <- c(21, 'MA', 'MaranhÃ£o', 210520, 'Gerais De Balsas' )
temp_sf[7, c('code_state', 'abbrev_state', 'name_state', 'code_micro', 'names_micro')] <- c(21, 'MA', 'MaranhÃ£o', 210521, 'Chapadas Das Mangabeiras' )
}
temp_sf
if (year==2000 & temp_sf$code_state[1]==21) {
temp_sf[3, c('code_state', 'abbrev_state', 'name_state', 'code_micro', 'names_micro')] <- c(21, 'MA', 'MaranhÃ£o', 210520, 'Gerais De Balsas' )
temp_sf[7, c('code_state', 'abbrev_state', 'name_state', 'code_micro', 'names_micro')] <- c(21, 'MA', 'MaranhÃ£o', 210521, 'Chapadas Das Mangabeiras' )
}
temp_sf
# read sf file
temp_sf <- st_read(i)
names(temp_sf) <- names(temp_sf) %>% tolower()
if (year %like% "2000|2001"){
# dplyr::rename and subset columns
temp_sf <- dplyr::select(temp_sf, c('code_micro'= geocodigo, 'name_micro'=nome, 'geom'))
}
if (year %like% "2010"){
# dplyr::rename and subset columns
temp_sf <- dplyr::select(temp_sf, c('code_micro'=cd_geocodu, 'name_micro'=nm_micro, 'geom'))
}
if (year %like% "2013|2014|2015|2016|2017|2018"){
# dplyr::rename and subset columns
temp_sf <- dplyr::select(temp_sf, c('code_micro'=cd_geocmi, 'name_micro'=nm_micro, 'geom'))
}
if (year %like% "2019|2020"){
# dplyr::rename and subset columns
temp_sf <- dplyr::select(temp_sf, c('code_micro'=cd_micro, 'name_micro'=nm_micro, 'abbrev_state'=sigla_uf, 'geom'))
}
# Use UTF-8 encoding
temp_sf <- use_encoding_utf8(temp_sf)
# add name_state
temp_sf$code_state <- substring(temp_sf$code_micro, 1,2)
temp_sf <- add_state_info(temp_sf,column = 'code_micro')
# reorder columns
temp_sf <- dplyr::select(temp_sf, 'code_state', 'abbrev_state', 'name_state', 'code_micro', 'name_micro', 'geom')
# Capitalize the first letter
temp_sf$name_micro <- stringr::str_to_title(temp_sf$name_micro)
# Harmonize spatial projection CRS, using SIRGAS 2000 epsg (SRID): 4674
temp_sf <- harmonize_projection(temp_sf)
# strange error in Bahia 2000
# remove geometries with area == 0
temp_sf <- temp_sf[ as.numeric(st_area(temp_sf)) != 0, ]
# strange error in Maranhao 2000
# micro_21 <- geobr::read_micro_region(code_micro = 21, year=2000)
# mapview(micro_21) + temp_sf[c(7),]
temp_sf
temp_sf[3, c('code_state', 'abbrev_state', 'name_state', 'code_micro', 'names_micro')] <- c(21, 'MA', 'MaranhÃ£o', 210520, 'Gerais De Balsas' )
temp_sf
# read sf file
temp_sf <- st_read(i)
names(temp_sf) <- names(temp_sf) %>% tolower()
if (year %like% "2000|2001"){
# dplyr::rename and subset columns
temp_sf <- dplyr::select(temp_sf, c('code_micro'= geocodigo, 'name_micro'=nome, 'geom'))
}
if (year %like% "2010"){
# dplyr::rename and subset columns
temp_sf <- dplyr::select(temp_sf, c('code_micro'=cd_geocodu, 'name_micro'=nm_micro, 'geom'))
}
if (year %like% "2013|2014|2015|2016|2017|2018"){
# dplyr::rename and subset columns
temp_sf <- dplyr::select(temp_sf, c('code_micro'=cd_geocmi, 'name_micro'=nm_micro, 'geom'))
}
if (year %like% "2019|2020"){
# dplyr::rename and subset columns
temp_sf <- dplyr::select(temp_sf, c('code_micro'=cd_micro, 'name_micro'=nm_micro, 'abbrev_state'=sigla_uf, 'geom'))
}
# Use UTF-8 encoding
temp_sf <- use_encoding_utf8(temp_sf)
# add name_state
temp_sf$code_state <- substring(temp_sf$code_micro, 1,2)
temp_sf <- add_state_info(temp_sf,column = 'code_micro')
# reorder columns
temp_sf <- dplyr::select(temp_sf, 'code_state', 'abbrev_state', 'name_state', 'code_micro', 'name_micro', 'geom')
# Capitalize the first letter
temp_sf$name_micro <- stringr::str_to_title(temp_sf$name_micro)
# Harmonize spatial projection CRS, using SIRGAS 2000 epsg (SRID): 4674
temp_sf <- harmonize_projection(temp_sf)
# strange error in Bahia 2000
# remove geometries with area == 0
temp_sf <- temp_sf[ as.numeric(st_area(temp_sf)) != 0, ]
# strange error in Maranhao 2000
# micro_21 <- geobr::read_micro_region(code_micro = 21, year=2000)
# mapview(micro_21) + temp_sf[c(7),]
if (year==2000 & temp_sf$code_state[1]==21) {
temp_sf[3, c('code_state', 'abbrev_state', 'name_state', 'code_micro', 'name_micro')] <- c(21, 'MA', 'MaranhÃ£o', 210520, 'Gerais De Balsas' )
temp_sf[7, c('code_state', 'abbrev_state', 'name_state', 'code_micro', 'name_micro')] <- c(21, 'MA', 'MaranhÃ£o', 210521, 'Chapadas Das Mangabeiras' )
}
temp_sf
# create a function that will clean the sf files according to particularities of the data in each year0
clean_micro <- function( e ){ #  e <- sub_dirs[ sub_dirs %like% 2000]
options(encoding = "UTF-8")
# get year of the folder
last4 <- function(x){substr(x, nchar(x)-3, nchar(x))}   # function to get the last 4 digits of a string
year <- last4(e)
year
# create directory to save original shape files in sf format
dir.create(file.path("shapes_in_sf_all_years_cleaned2"), showWarnings = FALSE)
# create a subdirectory of states, municipalities, micro and meso regions
dir.create(file.path("shapes_in_sf_all_years_cleaned2/micro_regiao/"), showWarnings = FALSE)
# create a subdirectory of years
dir.create(file.path(paste0("shapes_in_sf_all_years_cleaned2/micro_regiao/",year)), showWarnings = FALSE)
gc(reset = T)
dir.dest <- file.path(paste0("./shapes_in_sf_all_years_cleaned2/micro_regiao/",year))
# list all sf files in that year/folder
sf_files <- list.files(e, full.names = T, recursive = T, pattern = ".gpkg$")
#sf_files <- sf_files[sf_files %like% "Microrregioes"]
# for each file
for (i in sf_files){ #  i <- sf_files[8]
# read sf file
temp_sf <- st_read(i)
names(temp_sf) <- names(temp_sf) %>% tolower()
if (year %like% "2000|2001"){
# dplyr::rename and subset columns
temp_sf <- dplyr::select(temp_sf, c('code_micro'= geocodigo, 'name_micro'=nome, 'geom'))
}
if (year %like% "2010"){
# dplyr::rename and subset columns
temp_sf <- dplyr::select(temp_sf, c('code_micro'=cd_geocodu, 'name_micro'=nm_micro, 'geom'))
}
if (year %like% "2013|2014|2015|2016|2017|2018"){
# dplyr::rename and subset columns
temp_sf <- dplyr::select(temp_sf, c('code_micro'=cd_geocmi, 'name_micro'=nm_micro, 'geom'))
}
if (year %like% "2019|2020"){
# dplyr::rename and subset columns
temp_sf <- dplyr::select(temp_sf, c('code_micro'=cd_micro, 'name_micro'=nm_micro, 'abbrev_state'=sigla_uf, 'geom'))
}
# Use UTF-8 encoding
temp_sf <- use_encoding_utf8(temp_sf)
# add name_state
temp_sf$code_state <- substring(temp_sf$code_micro, 1,2)
temp_sf <- add_state_info(temp_sf,column = 'code_micro')
# reorder columns
temp_sf <- dplyr::select(temp_sf, 'code_state', 'abbrev_state', 'name_state', 'code_micro', 'name_micro', 'geom')
# Capitalize the first letter
temp_sf$name_micro <- stringr::str_to_title(temp_sf$name_micro)
# Harmonize spatial projection CRS, using SIRGAS 2000 epsg (SRID): 4674
temp_sf <- harmonize_projection(temp_sf)
# strange error in Bahia 2000
# remove geometries with area == 0
temp_sf <- temp_sf[ as.numeric(st_area(temp_sf)) != 0, ]
# strange error in Maranhao 2000
# micro_21 <- geobr::read_micro_region(code_micro = 21, year=2000)
# mapview(micro_21) + temp_sf[c(7),]
if (year==2000 & temp_sf$code_state[1]==21) {
temp_sf[3, c('code_state', 'abbrev_state', 'name_state', 'code_micro', 'name_micro')] <- c(21, 'MA', 'MaranhÃ£o', 210520, 'Gerais De Balsas' )
temp_sf[7, c('code_state', 'abbrev_state', 'name_state', 'code_micro', 'name_micro')] <- c(21, 'MA', 'MaranhÃ£o', 210521, 'Chapadas Das Mangabeiras' )
}
# Make an invalid geometry valid # st_is_valid( sf)
temp_sf <- sf::st_make_valid(temp_sf)
# keep code as.numeric()
temp_sf$code_micro <- as.numeric(temp_sf$code_micro)
temp_sf$code_state <- as.numeric(temp_sf$code_state)
# simplify
temp_sf_simplified <- simplify_temp_sf(temp_sf)
# convert to MULTIPOLYGON
temp_sf <- to_multipolygon(temp_sf)
temp_sf_simplified <- to_multipolygon(temp_sf_simplified)
# Save cleaned sf in the cleaned directory
dir.dest.file <- paste0(dir.dest,"/")
# save each state separately
for( c in unique(temp_sf$code_state)){ # c <- 11
temp2 <- subset(temp_sf, code_state ==c)
temp2_simplified <- subset(temp_sf_simplified, code_state ==c)
file.name <- paste0(unique(substr(temp2$code_state,1,2)),"UF",".gpkg")
# original
i <- paste0(dir.dest.file,file.name)
sf::st_write(temp2, i, overwrite=TRUE)
# simplified
i <- gsub(".gpkg", "_simplified.gpkg", i)
sf::st_write(temp2_simplified, i, overwrite=TRUE)
}
}
}
# apply function in parallel
future::plan(multisession)
future_map(sub_dirs, clean_micro)
# create a function that will clean the sf files according to particularities of the data in each year0
clean_micro <- function( e ){ #  e <- sub_dirs[ sub_dirs %like% 2000]
options(encoding = "UTF-8")
# get year of the folder
last4 <- function(x){substr(x, nchar(x)-3, nchar(x))}   # function to get the last 4 digits of a string
year <- last4(e)
year
# create directory to save original shape files in sf format
dir.create(file.path("shapes_in_sf_all_years_cleaned2"), showWarnings = FALSE)
# create a subdirectory of states, municipalities, micro and meso regions
dir.create(file.path("shapes_in_sf_all_years_cleaned2/micro_regiao/"), showWarnings = FALSE)
# create a subdirectory of years
dir.create(file.path(paste0("shapes_in_sf_all_years_cleaned2/micro_regiao/",year)), showWarnings = FALSE)
gc(reset = T)
dir.dest <- file.path(paste0("./shapes_in_sf_all_years_cleaned2/micro_regiao/",year))
# list all sf files in that year/folder
sf_files <- list.files(e, full.names = T, recursive = T, pattern = ".gpkg$")
#sf_files <- sf_files[sf_files %like% "Microrregioes"]
# for each file
for (i in sf_files){ #  i <- sf_files[8]
# read sf file
temp_sf <- st_read(i)
names(temp_sf) <- names(temp_sf) %>% tolower()
if (year %like% "2000|2001"){
# dplyr::rename and subset columns
temp_sf <- dplyr::select(temp_sf, c('code_micro'= geocodigo, 'name_micro'=nome, 'geom'))
}
if (year %like% "2010"){
# dplyr::rename and subset columns
temp_sf <- dplyr::select(temp_sf, c('code_micro'=cd_geocodu, 'name_micro'=nm_micro, 'geom'))
}
if (year %like% "2013|2014|2015|2016|2017|2018"){
# dplyr::rename and subset columns
temp_sf <- dplyr::select(temp_sf, c('code_micro'=cd_geocmi, 'name_micro'=nm_micro, 'geom'))
}
if (year %like% "2019|2020"){
# dplyr::rename and subset columns
temp_sf <- dplyr::select(temp_sf, c('code_micro'=cd_micro, 'name_micro'=nm_micro, 'abbrev_state'=sigla_uf, 'geom'))
}
# Use UTF-8 encoding
temp_sf <- use_encoding_utf8(temp_sf)
# add name_state
temp_sf$code_state <- substring(temp_sf$code_micro, 1,2)
temp_sf <- add_state_info(temp_sf,column = 'code_micro')
# reorder columns
temp_sf <- dplyr::select(temp_sf, 'code_state', 'abbrev_state', 'name_state', 'code_micro', 'name_micro', 'geom')
# Capitalize the first letter
temp_sf$name_micro <- stringr::str_to_title(temp_sf$name_micro)
# Harmonize spatial projection CRS, using SIRGAS 2000 epsg (SRID): 4674
temp_sf <- harmonize_projection(temp_sf)
# strange error in Bahia 2000
# remove geometries with area == 0
temp_sf <- temp_sf[ as.numeric(st_area(temp_sf)) != 0, ]
# strange error in Maranhao 2000
# micro_21 <- geobr::read_micro_region(code_micro = 21, year=2000)
# mapview(micro_21) + temp_sf[c(7),]
if (year==2000 & temp_sf$code_state[1]==21) {
temp_sf[3, c('code_state', 'abbrev_state', 'name_state', 'code_micro', 'name_micro')] <- c(21, 'MA', 'MaranhÃ£o', 210520, 'Gerais De Balsas' )
temp_sf[7, c('code_state', 'abbrev_state', 'name_state', 'code_micro', 'name_micro')] <- c(21, 'MA', 'MaranhÃ£o', 210521, 'Chapadas Das Mangabeiras' )
}
# Make an invalid geometry valid # st_is_valid( sf)
temp_sf <- sf::st_make_valid(temp_sf)
# keep code as.numeric()
temp_sf$code_micro <- as.numeric(temp_sf$code_micro)
temp_sf$code_state <- as.numeric(temp_sf$code_state)
# simplify
temp_sf_simplified <- simplify_temp_sf(temp_sf)
# convert to MULTIPOLYGON
temp_sf <- to_multipolygon(temp_sf)
temp_sf_simplified <- to_multipolygon(temp_sf_simplified)
# Save cleaned sf in the cleaned directory
dir.dest.file <- paste0(dir.dest,"/")
# save each state separately
for( c in unique(temp_sf$code_state)){ # c <- 11
temp2 <- subset(temp_sf, code_state ==c)
temp2_simplified <- subset(temp_sf_simplified, code_state ==c)
file.name <- paste0(unique(substr(temp2$code_state,1,2)),"MI",".gpkg")
# original
i <- paste0(dir.dest.file,file.name)
sf::st_write(temp2, i, overwrite=TRUE)
# simplified
i <- gsub(".gpkg", "_simplified.gpkg", i)
sf::st_write(temp2_simplified, i, overwrite=TRUE)
}
}
}
# apply function in parallel
future::plan(multisession)
future_map(sub_dirs, clean_micro)
source("./prep_data/prep_functions.R")
